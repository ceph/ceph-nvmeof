//
//  Copyright (c) 2021 International Business Machines
//  All rights reserved.
//
//  SPDX-License-Identifier: MIT
//
//  Authors: anita.shekar@ibm.com, sandy.kaur@ibm.com
//


syntax = "proto3";

service NVMEGateway {
	// start the SPDK target
	rpc start_spdk(spdk_start_req) returns(spdk_status) {}

	// Create bdev/ NVMe Namespace from an RBD image
	rpc bdev_rbd_create(bdev_create_req) returns (bdev_info) {}

	// Delete RBD bdev
	rpc bdev_rbd_delete(bdev_delete_req) returns (req_status) {}

	// Create NVMf Subsystem
	rpc nvmf_create_subsystem(subsystem_create_req) returns(subsystem_info) {}

	// Delete NVMf Subsystem
	rpc nvmf_delete_subsystem(subsystem_delete_req) returns(req_status) {}

	// Add NVMf namespace to nvme subsystem
	rpc nvmf_subsystem_add_ns(subsystem_add_ns_req) returns(nsid) {}

	// Delete namespace from subsystem
	rpc nvmf_subsystem_remove_ns(ns_delete_req) returns(req_status) {}

	// Add Host to a subsystem (so all namespaces in that subsystem)
	rpc nvmf_subsystem_add_host(subsystem_add_host_req) returns (req_status) {}

	// Delete host from subsystem
	rpc nvmf_subsystem_remove_host(host_delete_req) returns (req_status) {}

	// Add an SPDK-NVMf listener at a given IP addr/ tcp port
	rpc nvmf_subsystem_add_listener(subsystem_add_listener_req) returns(req_status) {}

	// Delete listener from subsystem
	rpc nvmf_subsystem_remove_listener(listener_delete_req) returns(req_status) {}

	// Get NVMf Subsystems
	rpc nvmf_get_subsystems(subsystems_get_req) returns(subsystems_info) {}
}

message spdk_start_req {
}


message spdk_status {
	bool spdk_status = 1;
}


message bdev_create_req {
	string bdev_name = 1; // required
	optional string user_id = 2;
	string ceph_pool_name = 3; //required
	string rbd_name = 4; //required
	int32  block_size = 5; //required
}

message bdev_info {
	string bdev_name = 1;
}

message bdev_delete_req {
	string bdev_name = 1;
}

message subsystem_create_req {
	string subsystem_nqn = 1; //required
	optional string tgt_name = 2; //parent NVMeoF target name
	optional string serial_number = 3; // Serial number of virtual controller
	optional string model_number = 4; //model Number of virtual controller
	optional int32  max_namespaces = 5; //default = 0 (unlimited)
	optional bool   allow_any_host = 6; //Default: false.
}

message subsystem_info {
	string subsystem_nqn = 1;
	bool   created = 2; //Status of the create request
}

message subsystem_delete_req {
	string subsystem_nqn = 1;
}

message subsystem_add_ns_req {
	string subsystem_nqn = 1; //required
	optional int32  nsid = 2; //Default: automaticaly assigned nsid
	string bdev_name = 3; //required. Name of bdev to expose as namespace
	optional string nguid = 4;
	optional string euid = 5;
	optional string uuid = 6;
	optional string ptpl_file = 7; //file path to store/ restore persistent reservation info
	optional string tgt_name = 8; //parent NVMeoF target name
}

message nsid {
	int32 nsid = 1; //nsid created
}

message ns_delete_req {
	string subsystem_nqn = 1;
	int32 nsid = 2;
	optional string tgt_name = 3;
}

message subsystem_add_host_req {
	string subsystem_nqn = 1; //subsystem to which host is being added
	string host_nqn = 2; //nqn of host requesting access
	optional string tgt_name = 3; //Parent NVMe-oF target name
}

message host_delete_req {
	string subsystem_nqn = 1;
	string host_nqn = 2;
	optional string tgt_name = 3; //Parent NVMe-oF target name
}

message req_status {
	bool status = 1;
}

message subsystem_add_listener_req {
	string nqn = 1; //subsystem for which listener is being added
	optional string tgt_name = 2;
	string gateway_name = 3;
	string trtype = 4;
	string adrfam = 5;
	string traddr = 6;
	string trsvcid = 7;
}

message listener_delete_req {
	string nqn = 1;
	optional string tgt_name = 2;
	string gateway_name = 3;
	string trtype = 4;
	string adrfam = 5;
	string traddr = 6;
	string trsvcid = 7;
}

message subsystems_get_req {
}

message subsystems_info {
	string subsystems = 1;
}

